// <auto-generated />
using System;
using MechaSoft.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MechaSoft.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("MechaSoftCS")
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MechaSoft.Domain.Model.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CitizenCard")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Nif")
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Nif")
                        .IsUnique()
                        .HasFilter("[Nif] IS NOT NULL");

                    b.HasIndex("Phone");

                    b.ToTable("Customer", "MechaSoftCS");
                });

            modelBuilder.Entity("MechaSoft.Domain.Model.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CanPerformInspections")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("InspectionLicenseNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Specialties")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Specialties");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("InspectionLicenseNumber")
                        .IsUnique()
                        .HasFilter("[InspectionLicenseNumber] IS NOT NULL");

                    b.HasIndex("IsActive");

                    b.HasIndex("Role");

                    b.ToTable("Employee", "MechaSoftCS");
                });

            modelBuilder.Entity("MechaSoft.Domain.Model.Inspection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CertificateNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InspectionCenter")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("InspectionDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Observations")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid>("ServiceOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VehicleMileage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CertificateNumber")
                        .IsUnique()
                        .HasFilter("[CertificateNumber] IS NOT NULL");

                    b.HasIndex("ExpiryDate");

                    b.HasIndex("InspectionCenter");

                    b.HasIndex("InspectionDate");

                    b.HasIndex("Result");

                    b.HasIndex("ServiceOrderId");

                    b.HasIndex("Type");

                    b.HasIndex("VehicleId");

                    b.HasIndex("ExpiryDate", "Result")
                        .HasDatabaseName("IX_Inspection_Expiry_Result")
                        .HasFilter("[Result] = 'Approved'");

                    b.HasIndex("Result", "ExpiryDate")
                        .HasDatabaseName("IX_Inspection_Result_Expiry");

                    b.HasIndex("VehicleId", "InspectionDate")
                        .HasDatabaseName("IX_Inspection_Vehicle_Date");

                    b.HasIndex("VehicleId", "Type")
                        .HasDatabaseName("IX_Inspection_Vehicle_Type");

                    b.HasIndex("VehicleId", "Type", "InspectionDate")
                        .HasDatabaseName("IX_Inspection_Vehicle_Type_Date");

                    b.ToTable("Inspection", "MechaSoftCS");
                });

            modelBuilder.Entity("MechaSoft.Domain.Model.Part", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("MinStockLevel")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<string>("SupplierContact")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SupplierName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Brand")
                        .HasFilter("[Brand] IS NOT NULL");

                    b.HasIndex("Category");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("IsActive");

                    b.HasIndex("Name");

                    b.HasIndex("SupplierName")
                        .HasFilter("[SupplierName] IS NOT NULL");

                    b.HasIndex("Category", "IsActive")
                        .HasDatabaseName("IX_Part_Category_IsActive");

                    b.HasIndex("StockQuantity", "MinStockLevel")
                        .HasDatabaseName("IX_Part_Stock_Levels");

                    b.ToTable("Part", "MechaSoftCS");
                });

            modelBuilder.Entity("MechaSoft.Domain.Model.PartItem", b =>
                {
                    b.Property<Guid>("ServiceOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ServiceOrderId", "PartId");

                    b.HasIndex("PartId");

                    b.HasIndex("ServiceOrderId");

                    b.ToTable("PartItem", "MechaSoftCS");
                });

            modelBuilder.Entity("MechaSoft.Domain.Model.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("EstimatedHours")
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("RequiresInspection")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Category", "IsActive")
                        .HasDatabaseName("IX_Service_Category_IsActive");

                    b.ToTable("Service", "MechaSoftCS");
                });

            modelBuilder.Entity("MechaSoft.Domain.Model.ServiceItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("ActualHours")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("EstimatedHours")
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MechanicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CompletedAt")
                        .HasFilter("[CompletedAt] IS NOT NULL");

                    b.HasIndex("MechanicId")
                        .HasFilter("[MechanicId] IS NOT NULL");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ServiceOrderId");

                    b.HasIndex("StartedAt")
                        .HasFilter("[StartedAt] IS NOT NULL");

                    b.HasIndex("Status");

                    b.HasIndex("MechanicId", "Status")
                        .HasDatabaseName("IX_ServiceItem_Mechanic_Status")
                        .HasFilter("[MechanicId] IS NOT NULL");

                    b.HasIndex("ServiceOrderId", "Status")
                        .HasDatabaseName("IX_ServiceItem_ServiceOrder_Status");

                    b.ToTable("ServiceItem", "MechaSoftCS");
                });

            modelBuilder.Entity("MechaSoft.Domain.Model.ServiceOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ActualDelivery")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("ActualHours")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("EstimatedDelivery")
                        .HasColumnType("datetime2");

                    b.Property<string>("InternalNotes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MechanicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("RequiresInspection")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ActualDelivery")
                        .HasFilter("[ActualDelivery] IS NOT NULL");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EstimatedDelivery")
                        .HasFilter("[EstimatedDelivery] IS NOT NULL");

                    b.HasIndex("MechanicId")
                        .HasFilter("[MechanicId] IS NOT NULL");

                    b.HasIndex("OrderNumber")
                        .IsUnique();

                    b.HasIndex("Priority");

                    b.HasIndex("RequiresInspection");

                    b.HasIndex("Status");

                    b.HasIndex("VehicleId");

                    b.HasIndex("Status", "Priority")
                        .HasDatabaseName("IX_ServiceOrder_Status_Priority");

                    b.ToTable("ServiceOrder", "MechaSoftCS");
                });

            modelBuilder.Entity("MechaSoft.Domain.Model.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ChassisNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("EngineDisplacement")
                        .HasColumnType("int");

                    b.Property<string>("EngineNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("EnginePower")
                        .HasColumnType("int");

                    b.Property<string>("FuelType")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime?>("InspectionExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("Mileage")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChassisNumber")
                        .IsUnique()
                        .HasFilter("[ChassisNumber] IS NOT NULL");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FuelType");

                    b.HasIndex("InspectionExpiryDate")
                        .HasFilter("[InspectionExpiryDate] IS NOT NULL");

                    b.HasIndex("LicensePlate")
                        .IsUnique();

                    b.HasIndex("Year");

                    b.HasIndex("Brand", "Model")
                        .HasDatabaseName("IX_Vehicle_Brand_Model");

                    b.ToTable("Vehicle", "MechaSoftCS");
                });

            modelBuilder.Entity("MechaSoft.Domain.Model.Customer", b =>
                {
                    b.OwnsOne("MechaSoft.Domain.Model.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Complement")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Complement");

                            b1.Property<string>("District")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("District");

                            b1.Property<string>("Municipality")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Municipality");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("Number");

                            b1.Property<string>("Parish")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Parish");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(8)
                                .HasColumnType("nvarchar(8)")
                                .HasColumnName("PostalCode");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("Street");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customer", "MechaSoftCS");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.OwnsOne("MechaSoft.Domain.Model.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("LastName");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customer", "MechaSoftCS");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("MechaSoft.Domain.Model.Employee", b =>
                {
                    b.OwnsOne("MechaSoft.Domain.Model.Money", "HourlyRate", b1 =>
                        {
                            b1.Property<Guid>("EmployeeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("HourlyRateAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasDefaultValue("EUR")
                                .HasColumnName("HourlyRateCurrency");

                            b1.HasKey("EmployeeId");

                            b1.ToTable("Employee", "MechaSoftCS");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });

                    b.OwnsOne("MechaSoft.Domain.Model.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("EmployeeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("LastName");

                            b1.HasKey("EmployeeId");

                            b1.ToTable("Employee", "MechaSoftCS");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });

                    b.Navigation("HourlyRate");

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("MechaSoft.Domain.Model.Inspection", b =>
                {
                    b.HasOne("MechaSoft.Domain.Model.ServiceOrder", "ServiceOrder")
                        .WithMany("Inspections")
                        .HasForeignKey("ServiceOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MechaSoft.Domain.Model.Vehicle", "Vehicle")
                        .WithMany("Inspections")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("MechaSoft.Domain.Model.Money", "Cost", b1 =>
                        {
                            b1.Property<Guid>("InspectionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("CostAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasDefaultValue("EUR")
                                .HasColumnName("CostCurrency");

                            b1.HasKey("InspectionId");

                            b1.ToTable("Inspection", "MechaSoftCS");

                            b1.WithOwner()
                                .HasForeignKey("InspectionId");
                        });

                    b.Navigation("Cost")
                        .IsRequired();

                    b.Navigation("ServiceOrder");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("MechaSoft.Domain.Model.Part", b =>
                {
                    b.OwnsOne("MechaSoft.Domain.Model.Money", "SalePrice", b1 =>
                        {
                            b1.Property<Guid>("PartId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("SalePriceAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasDefaultValue("EUR")
                                .HasColumnName("SalePriceCurrency");

                            b1.HasKey("PartId");

                            b1.ToTable("Part", "MechaSoftCS");

                            b1.WithOwner()
                                .HasForeignKey("PartId");
                        });

                    b.OwnsOne("MechaSoft.Domain.Model.Money", "UnitCost", b1 =>
                        {
                            b1.Property<Guid>("PartId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("UnitCostAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasDefaultValue("EUR")
                                .HasColumnName("UnitCostCurrency");

                            b1.HasKey("PartId");

                            b1.ToTable("Part", "MechaSoftCS");

                            b1.WithOwner()
                                .HasForeignKey("PartId");
                        });

                    b.Navigation("SalePrice")
                        .IsRequired();

                    b.Navigation("UnitCost")
                        .IsRequired();
                });

            modelBuilder.Entity("MechaSoft.Domain.Model.PartItem", b =>
                {
                    b.HasOne("MechaSoft.Domain.Model.Part", "Part")
                        .WithMany()
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MechaSoft.Domain.Model.ServiceOrder", "ServiceOrder")
                        .WithMany("Parts")
                        .HasForeignKey("ServiceOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("MechaSoft.Domain.Model.Money", "TotalPrice", b1 =>
                        {
                            b1.Property<Guid>("PartItemServiceOrderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("PartItemPartId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("TotalPriceAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasDefaultValue("EUR")
                                .HasColumnName("TotalPriceCurrency");

                            b1.HasKey("PartItemServiceOrderId", "PartItemPartId");

                            b1.ToTable("PartItem", "MechaSoftCS");

                            b1.WithOwner()
                                .HasForeignKey("PartItemServiceOrderId", "PartItemPartId");
                        });

                    b.OwnsOne("MechaSoft.Domain.Model.Money", "UnitPrice", b1 =>
                        {
                            b1.Property<Guid>("PartItemServiceOrderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("PartItemPartId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("UnitPriceAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasDefaultValue("EUR")
                                .HasColumnName("UnitPriceCurrency");

                            b1.HasKey("PartItemServiceOrderId", "PartItemPartId");

                            b1.ToTable("PartItem", "MechaSoftCS");

                            b1.WithOwner()
                                .HasForeignKey("PartItemServiceOrderId", "PartItemPartId");
                        });

                    b.Navigation("Part");

                    b.Navigation("ServiceOrder");

                    b.Navigation("TotalPrice")
                        .IsRequired();

                    b.Navigation("UnitPrice")
                        .IsRequired();
                });

            modelBuilder.Entity("MechaSoft.Domain.Model.Service", b =>
                {
                    b.OwnsOne("MechaSoft.Domain.Model.Money", "FixedPrice", b1 =>
                        {
                            b1.Property<Guid>("ServiceId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("FixedPriceAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasDefaultValue("EUR")
                                .HasColumnName("FixedPriceCurrency");

                            b1.HasKey("ServiceId");

                            b1.ToTable("Service", "MechaSoftCS");

                            b1.WithOwner()
                                .HasForeignKey("ServiceId");
                        });

                    b.OwnsOne("MechaSoft.Domain.Model.Money", "PricePerHour", b1 =>
                        {
                            b1.Property<Guid>("ServiceId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("PricePerHourAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasDefaultValue("EUR")
                                .HasColumnName("PricePerHourCurrency");

                            b1.HasKey("ServiceId");

                            b1.ToTable("Service", "MechaSoftCS");

                            b1.WithOwner()
                                .HasForeignKey("ServiceId");
                        });

                    b.Navigation("FixedPrice");

                    b.Navigation("PricePerHour")
                        .IsRequired();
                });

            modelBuilder.Entity("MechaSoft.Domain.Model.ServiceItem", b =>
                {
                    b.HasOne("MechaSoft.Domain.Model.Employee", "Mechanic")
                        .WithMany()
                        .HasForeignKey("MechanicId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MechaSoft.Domain.Model.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MechaSoft.Domain.Model.ServiceOrder", "ServiceOrder")
                        .WithMany("Services")
                        .HasForeignKey("ServiceOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("MechaSoft.Domain.Model.Money", "TotalPrice", b1 =>
                        {
                            b1.Property<Guid>("ServiceItemId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("TotalPriceAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasDefaultValue("EUR")
                                .HasColumnName("TotalPriceCurrency");

                            b1.HasKey("ServiceItemId");

                            b1.ToTable("ServiceItem", "MechaSoftCS");

                            b1.WithOwner()
                                .HasForeignKey("ServiceItemId");
                        });

                    b.OwnsOne("MechaSoft.Domain.Model.Money", "UnitPrice", b1 =>
                        {
                            b1.Property<Guid>("ServiceItemId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("UnitPriceAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasDefaultValue("EUR")
                                .HasColumnName("UnitPriceCurrency");

                            b1.HasKey("ServiceItemId");

                            b1.ToTable("ServiceItem", "MechaSoftCS");

                            b1.WithOwner()
                                .HasForeignKey("ServiceItemId");
                        });

                    b.Navigation("Mechanic");

                    b.Navigation("Service");

                    b.Navigation("ServiceOrder");

                    b.Navigation("TotalPrice")
                        .IsRequired();

                    b.Navigation("UnitPrice")
                        .IsRequired();
                });

            modelBuilder.Entity("MechaSoft.Domain.Model.ServiceOrder", b =>
                {
                    b.HasOne("MechaSoft.Domain.Model.Customer", "Customer")
                        .WithMany("ServiceOrders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MechaSoft.Domain.Model.Employee", "Mechanic")
                        .WithMany("ServiceOrders")
                        .HasForeignKey("MechanicId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MechaSoft.Domain.Model.Vehicle", "Vehicle")
                        .WithMany("ServiceOrders")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("MechaSoft.Domain.Model.Money", "EstimatedCost", b1 =>
                        {
                            b1.Property<Guid>("ServiceOrderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("EstimatedCostAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasDefaultValue("EUR")
                                .HasColumnName("EstimatedCostCurrency");

                            b1.HasKey("ServiceOrderId");

                            b1.ToTable("ServiceOrder", "MechaSoftCS");

                            b1.WithOwner()
                                .HasForeignKey("ServiceOrderId");
                        });

                    b.OwnsOne("MechaSoft.Domain.Model.Money", "FinalCost", b1 =>
                        {
                            b1.Property<Guid>("ServiceOrderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("FinalCostAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasDefaultValue("EUR")
                                .HasColumnName("FinalCostCurrency");

                            b1.HasKey("ServiceOrderId");

                            b1.ToTable("ServiceOrder", "MechaSoftCS");

                            b1.WithOwner()
                                .HasForeignKey("ServiceOrderId");
                        });

                    b.Navigation("Customer");

                    b.Navigation("EstimatedCost")
                        .IsRequired();

                    b.Navigation("FinalCost");

                    b.Navigation("Mechanic");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("MechaSoft.Domain.Model.Vehicle", b =>
                {
                    b.HasOne("MechaSoft.Domain.Model.Customer", "Customer")
                        .WithMany("Vehicles")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("MechaSoft.Domain.Model.Customer", b =>
                {
                    b.Navigation("ServiceOrders");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("MechaSoft.Domain.Model.Employee", b =>
                {
                    b.Navigation("ServiceOrders");
                });

            modelBuilder.Entity("MechaSoft.Domain.Model.ServiceOrder", b =>
                {
                    b.Navigation("Inspections");

                    b.Navigation("Parts");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("MechaSoft.Domain.Model.Vehicle", b =>
                {
                    b.Navigation("Inspections");

                    b.Navigation("ServiceOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
