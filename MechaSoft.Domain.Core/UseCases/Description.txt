# USE CASES - CASOS DE USO

## O que são Use Cases?

Os Use Cases (Casos de Uso) são uma técnica de modelagem que descreve como um sistema interage com atores externos (utilizadores, outros sistemas) para alcançar um objetivo específico. No contexto da arquitetura de software, representam as regras de negócio da aplicação.

## Características dos Use Cases

### 1. **Centrados no Utilizador**
- Descrevem funcionalidades do ponto de vista do utilizador
- Focam no "o quê" o sistema deve fazer, não no "como"

### 2. **Orientados a Objetivos**
- Cada use case tem um objetivo claro e específico
- Representam uma unidade completa de trabalho

### 3. **Independentes da Interface**
- Não se preocupam com detalhes de UI/UX
- Focam na lógica de negócio pura

## Estrutura de um Use Case

### Componentes Principais:

## Use Cases na Oficina Automóvel

### Exemplos Práticos:

#### 1. **Criar Ordem de Serviço**
- **Ator:** Dono da Oficina
- **Objetivo:** Registar um novo trabalho para um veículo
- **Pré-condições:** Cliente e veículo devem existir
- **Fluxo Principal:**
  1. Selecionar cliente e veículo
  2. Descrever o problema/serviço
  3. Escolher serviços a realizar
  4. Selecionar peças necessárias
  5. Definir prioridade e prazo
  6. Calcular custo estimado
  7. Guardar ordem de serviço

#### 2. **Agendar Inspeção**
- **Ator:** Dono da Oficina
- **Objetivo:** Marcar inspeção para um veículo
- **Pré-condições:** Veículo deve existir
- **Fluxo Principal:**
  1. Verificar data de validade da inspeção
  2. Escolher tipo de inspeção
  3. Definir data e centro de inspeção
  4. Calcular custo
  5. Criar registo de inspeção

#### 3. **Gerir Stock de Peças**
- **Ator:** Dono da Oficina
- **Objetivo:** Controlar entrada/saída de peças
- **Fluxo Principal:**
  1. Registar movimento (entrada/saída)
  2. Atualizar quantidade em stock
  3. Verificar nível mínimo
  4. Alertar se stock baixo

## Vantagens dos Use Cases

### 1. **Clareza de Requisitos**
- Definem claramente o que o sistema deve fazer
- Evitam ambiguidades nos requisitos

### 2. **Comunicação Eficaz**
- Linguagem comum entre técnicos e utilizadores
- Facilitam discussões sobre funcionalidades

### 3. **Base para Testes**
- Cada use case pode gerar cenários de teste
- Garantem cobertura das funcionalidades principais

### 4. **Arquitetura Limpa**
- Separam lógica de negócio da infraestrutura
- Facilitam manutenção e evolução do código

## Implementação em Código

### Estrutura Típica:
```csharp
public interface ICreateServiceOrderUseCase
{
    Task<ServiceOrder> ExecuteAsync(CreateServiceOrderRequest request);
}

public class CreateServiceOrderUseCase : ICreateServiceOrderUseCase
{
    // Dependências (repositórios, serviços)
    
    public async Task<ServiceOrder> ExecuteAsync(CreateServiceOrderRequest request)
    {
        // 1. Validações
        // 2. Regras de negócio
        // 3. Persistência
        // 4. Retorno do resultado
    }
}